arr_y = array(1:20, dim=c(4, 4))
print(arr_y)
arr_z = array(1:20, dim=c(4, 6))
print(arr_z)
a = "test
a = "test
print(a)
a = "test"
print(a)
list_a = list(name = 'test', age = 20, phone = '01012345678')
print(list_a)
print(list_a['name'])
b = c('test', 20, '01012345678')
print(b[1])
# 데이터프레임 생성
# 2차원 데이터를 생성하는 과정
# 인덱스와 컬럼을 기준으로 데이터를 생성
df = data.frame(
name = c('test', 'test2', 'test3'),
age = c(20, 30, 40),
phone = c('01011112222', '01022223333', '01088887777')
)
print(df)
# 벡터의 개수를 다르게 데이터프레임을 생성
df2 = data.frame(
name = c('test', 'test2', 'test3'),
age = c(20, 30)
)
# 산술연산자
x <- 10
y <- 3
print(x + y)
x - y
x - y -> result
print(x * y)
print(x / y)
print(x ^ y)
print(x %% y)
print(x %/% y)
# 비교연산자
# 두개의 데이터를 비교하여 결과 값은 논리값(참/거짓)으로 출력
z <- 5
print(x == y)
print(y != z)
print(x > y)
print(x < z)
print(x <= z)
print(x =< z)
a = 1, b = 2
a = 1 \ b = 2
a = 1; b = 2
# 논리연산자
# 부정
print(!TRUE)
# and
# 두 개의 논리값들이 모두 참인 경우에만 참을 출력
# 그 외의 경우는 모두 거짓 출력
print(TRUE & TRUE)
print(TRUE & FALSE)
# or
# 두개의 논리값 중 하나만 참이여도 참을 출력
# 두개의 논리값이 모두 거짓인 경우에만 거짓을 출력
print(TRUE | TRUE)
print(TRUE | FALSE)
print(FALSE | FALSE)
# 조건문 (if문)
x <- 10
if (x > 5){
print('x는 5보다 크다')
}
# 조건문 (if문)
x <- 3
if (x > 5){
print('x는 5보다 크다')
}
# if ~ else문
# if 조건식이 참인경우 실행할 코드와
# else 문에서 조건식이 거짓인 경우 실행 할 코드를 작성
if (x > 5){
print('x는 5보다 크다')
}else{
print('x는 5보다 작거나 같다')
}
# 조건이 여러 개인 조건문 생성
score <- 95
if (score >= 90){
# score가 90점 이상인 경우
print('A')
}else if (score >= 80){
# score가 90점 미만이고 80점 이상인 경우
print('B')
}else if (score >= 70){
# score가 80점 미만이고 70점 이상인 경우
print('C')
}else {
# scroe가 70점 미만인 경우
print('F')
}
# 조건이 여러 개인 조건문 생성
score <- 77
if (score >= 90){
# score가 90점 이상인 경우
print('A')
}else if (score >= 80){
# score가 90점 미만이고 80점 이상인 경우
print('B')
}else if (score >= 70){
# score가 80점 미만이고 70점 이상인 경우
print('C')
}else {
# scroe가 70점 미만인 경우
print('F')
}
if (g){
print("TEST")
}
g <- 10
if (g){
print("TEST")
}
g <- ""
if (g){
print("TEST")
}
g <- ""
if (g){
print("TEST")
}
g <- 0
if (g){
print("TEST")
}
g <- 1
if (g){
print("TEST")
}
# if 조건식에 조건식이 2개 이상인 경우
id <- 'test'
pass <- '1234'
if (id == "test" & pass == '1234'){
print('로그인 성공')
}else{
print('로그인 실패')
}
pass <- '1111'
if (id == "test" & pass == '1234'){
print('로그인 성공')
}else{
print('로그인 실패')
}
# which문
# 벡터데이터에서 조건식이 일치하는 데이터의 위치 값을 출력
name <- c('test', 'test2', 'test3')
which(name == 'test2')
if (name[1] == 'test2'){
print(1)
}
if (name[2] == 'test2'){
print(2)
}
if (name[3] == 'test2'){
print(3)
}
which(name != 'test2')
which(name == 'test5')
array_a = 1:10
for (i in array_a){
print(i)
}
# 초기 합계 데이터를 0으로 지정
result <- 0
# 1부터 10까지 반복을 하는 반복문을 생성
for (i in array_a){
result = result + i
}
print(result)
i = 1
while (i <= 10){
print(i)
i = i + 1
}
# while문을 이용하여 1부터 10까지 합계를 출력
i = 1
# 합계 초기값 0을 대입
result = 0
while (i <= 10){
# i의 값을 result에 누적합
result = result + i
i = i + 1
}
print(result)
# while문을 이용하여 1부터 10까지 합계를 출력
i = 1
# 합계 초기값 0을 대입
result = 0
while (i <= 10){
i = i + 1
# i의 값을 result에 누적합
result = result + i
}
print(result)
# 2부터 9까지 반복을 하는 반복문을 생성
array_a = 2:9
print(i)
for (i in array_a){
print(i)
}
array_b = 1:9
for (i in array_a){
# print(i)
# i값이 2 부터 9일때 1부터 9까지 반복을 하는 반복문 생성
for (j in array_b){
print(j)
}
}
for (i in array_a){
# print(i)
# i값이 2 부터 9일때 1부터 9까지 반복을 하는 반복문 생성
for (j in array_b){
print(i * j)
}
}
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
for (j in 1:6){
## 5의 배수인 조건문을 생성
print(c(i, j))
## 조건식이 참인 경우 출력
}
}
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
for (j in 1:6){
## 5의 배수인 조건문을 생성
# print(c(i, j))
res = i + j
#if ( (i+j) %% 5 == 0)
if ( res %% 5 == 0){
## 조건식이 참인 경우 출력
print(c(i, j))
}
}
}
## 반복문 문제
## 2개의 주사위를 굴려서
## 두 주사위의 합이 5의 배수인 경우의 수를 출력하시오
cnt = 0
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
for (j in 1:6){
## 5의 배수인 조건문을 생성
# print(c(i, j))
res = i + j
#if ( (i+j) %% 5 == 0)
if ( res %% 5 == 0){
## 조건식이 참인 경우 출력
# print(c(i, j))
cnt = cnt + 1
}
}
}
print(cnt)
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
cnt = 0
for (j in 1:6){
## 5의 배수인 조건문을 생성
# print(c(i, j))
res = i + j
#if ( (i+j) %% 5 == 0)
if ( res %% 5 == 0){
## 조건식이 참인 경우 출력
# print(c(i, j))
cnt = cnt + 1
}
}
}
print(cnt)
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
for (j in 1:6){
cnt = 0
## 5의 배수인 조건문을 생성
# print(c(i, j))
res = i + j
#if ( (i+j) %% 5 == 0)
if ( res %% 5 == 0){
## 조건식이 참인 경우 출력
# print(c(i, j))
cnt = cnt + 1
}
}
}
print(cnt)
cnt = 0
## 1부터 6까지 반복을 하는 반복문을 생성
for (i in 1:6){
## 1부터 6까지 반복을 하는 반복문을 생성
for (j in 1:6){
## 5의 배수인 조건문을 생성
# print(c(i, j))
res = i + j
#if ( (i+j) %% 5 == 0)
if ( res %% 5 == 0){
## 조건식이 참인 경우 출력
# print(c(i, j))
cnt = cnt + 1
}
}
}
print(cnt)
# break문
# 반복문을 강제로 종료
for (i in 1:100){
if ( i > 3 ){
break
}
print(i)
}
# break문
# 반복문을 강제로 종료
for (i in 1:100){
print(i)
if ( i > 3 ){
break
}
}
result = 0
for (i in 1:100){
result = result + i
}
print(result)
result = 0
for (i in 1:100){
## 1번
result = result + i
## 2번
if (result >= 2000){
break
}
}
print(c(i,result))
result = 0
for (i in 1:100){
## 1번
if (result >= 2000){
break
}
result = result + i
## 2번
}
print(c(i,result))
result = 0
for (i in 1:100){
## 1번
result = result + i
## 2번
if (result >= 2000){
break
}
}
print(c(i,result))
i = 1
result = 0
while TRUE{
result = result + i
i = i + 1
}
while (TRUE){
result = result + i
i = i + 1
}
i = 1
result = 0
while (TRUE){
## 1
result = result + i
## 2
if (result >= 50000){
break
}
i = i + 1
## 3
}
print(c(i, result))
i = 1
result = 0
while (TRUE){
## 1
result = result + i
## 2
i = i + 1
## 3
if (result >= 50000){
break
}
}
print(c(i, result))
## 합계라는 초기 값을 0을 대입하여 생성
result <- 0
## 1부터 100까지 반복을 하는 반복문을 생성
for (i in 1:100){
## 짝수인 경우 조건문을 생성
if (i %% 2 == 0){
## 조건식이 참인 경우 누적합을 실행
result = result + i
}
}
## 합계를 출력
print(result)
result = 0
for (i in 1:50){
result = result + (i * 2)
}
print(result)
i = 1
result =0
while (TRUE){
if (i > 100){
break
}
## 1
if (i %% 2 == 0){
result = result + i
## 2 (무한 반복의 위험이 존재)
}
## 3
i = i + 1
}
print(result)
i = 2
result= 0
while (TRUE){
if (i > 100){
break
}
result = result + i
i = i + 2
}
print(result)
i = 1
result= 0
while (TRUE){
if (i > 100){
break
}
result = result + i
i = i + 2
}
print(result)
# 비순서형 벡터 데이터를 이용한 for문
array_a = c('kim', 'park', 'lee')
for (i in array_a){
print(i)
}
i <- 1
while (i <= 3){
print(i)
i = i + 1
}
i <- 1
while (i <= 3){
print(array_a[i])
i = i + 1
}
## next 문
## 반복문으로 되돌아간다. 다음으로 넘어간다.
for (i in 1:10){
if (i < 5){
next
}
print(i)
}
## next 문
## 반복문으로 되돌아간다. 다음으로 넘어간다.
for (i in 1:10){
print(i)
if (i < 5){
next
}
}
## next 문
## 반복문으로 되돌아간다. 다음으로 넘어간다.
for (i in 1:10){
print(i)
}
## next 문
## 반복문으로 되돌아간다. 다음으로 넘어간다.
for (i in 1:10){
if (i < 5){
next
}
print(i)
}
result = 0
for (i in 1:100){
result = result + i
}
print(result)
result = 0
for (i in 1:100){
if (i %% 2 == 1){
next
}
result = result + i
}
print(result)
